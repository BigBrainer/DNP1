@page "/adults"
@namespace ViewComponent
@using Models
@using ManageService
@inject IFamilyService FamilyService
@attribute [Authorize(Policy = "MustBeAtLeastSecurityLevel1")]
<h3></h3>

@if (families == null)
{
    <p>Loading...</p>
}
else if (!families.Any())
{
    <p>Looks like there is nothing here. Try adding some families!</p>
}
else
{
    <div class="d-flex flex-column">
        <label for="AgeFilter">Filter by age</label>
        <input type="text" id="AgeFilterText" @oninput="(args) => FilterAge(args)" />
        <p style="color:red">@ageError</p>

        <label for="NameFilter">Filter by surname</label>
        <input type="text" id="NameFilterText" @oninput="(args) => FilterSurname(args)" />
        <p style="color:red">@surnameError</p>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>First name</th>
                <th>Surname</th>
                <th>Sex</th>
                <th>Hair color</th>
                <th>Eye color</th>
                <th>Age</th>
                <th>Weight</th>
                <th>Height</th>
                <AuthorizeView Policy="MustBeAdministrator">
                    <th>Remove</th>
                </AuthorizeView>
            </tr>
        </thead>

        <tbody>
            @foreach (Adult adult in adultsToShow)
            {
                {
                    <tr>
                        <td>@adult.Id</td>
                        <td>@adult.FirstName</td>
                        <td>@adult.LastName</td>
                        <td>@adult.Sex</td>
                        <td>@adult.HairColor</td>
                        <td>@adult.EyeColor</td>
                        <td>@adult.Age</td>
                        <td>@adult.Weight</td>
                        <td>@adult.Height</td>
                        <AuthorizeView Policy="MustBeAdministrator">
                            <td><button class="oi oi-trash" @onclick="(() => RemoveAdultAsync(adult.Id))"></button></td>
                        </AuthorizeView>

                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private IList<Family> families;
    private IList<Adult> adultsToShow;
    private string ageError = "";
    private string surnameError = "";
    private delegate bool FilterDelegate(Family family, Adult adult);



    private string? filterBySurname = null;
    private string? filterByAge = null;

    //Get all the adults from each family

    protected async override Task OnInitializedAsync()
    {
        families = await FamilyService.LoadFamilyAsync();
        adultsToShow = CreateListOfSpecifiedAdults((family, adult) => true);
    }

    private IList<Adult> CreateListOfSpecifiedAdults(FilterDelegate del)
    {
        IList<Adult> adultsToShow = new List<Adult>();
        foreach (Family family in families)
        {
            foreach (Adult ad in family.Adults)
            {
                if (del(family, ad))
                {
                    adultsToShow.Add(ad);
                }
            }
        }
        return adultsToShow;
    }

    private async Task RemoveAdultAsync(int id)
    {
        await FamilyService.RemoveMemberAsync(id);
        adultsToShow.Remove(adultsToShow.FirstOrDefault(ad => ad.Id == id));
    }

    private void FilterAge(ChangeEventArgs args)
    {
        ageError = "";
        filterByAge = args.Value.ToString();
        if (String.IsNullOrEmpty(filterByAge))
        {
            filterByAge = null;
        }
        else if (filterByAge.Any(char.IsLetter))
        {
            ageError = "Input a number, please";
        }
        ExecuteFilter();
    }

    private void FilterSurname(ChangeEventArgs args)
    {
        surnameError = "";
        filterBySurname = args.Value.ToString();
        if (String.IsNullOrEmpty(filterBySurname))
        {
            filterBySurname = null;
        }
        else if (filterBySurname.Any(char.IsDigit))
        {
            surnameError = "Input only letters, please";
        }
        ExecuteFilter();

    }

    private void ExecuteFilter()
    {
        adultsToShow = CreateListOfSpecifiedAdults((family, adult) => (filterByAge != null && adult.Age.ToString().Equals(filterByAge) || filterByAge == null) &&
               (filterBySurname != null && adult.LastName.ToLower().Contains(filterBySurname.ToLower()) || filterBySurname == null));
    }
}
