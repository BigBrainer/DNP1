@page "/families"
@namespace ManageService
@using Models
@inject IFamilyService FamilyService
@attribute [Authorize(Policy = "MustBeAtLeastSecurityLevel1")]

@if (families == null)
{
    <p>Loading...</p>
}
else if (!families.Any())
{
    <p>Looks like there is nothing here. Try adding some families!</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Family</th>
                <th>Street name</th>
                <th>House number</th>
                <th>Members</th>
                <AuthorizeView Policy="MustBeAdministrator">
                    <th>Delete</th>
                </AuthorizeView>
            </tr>
        </thead>
        <tbody>
            @foreach(Family fam in families)
            {
            <tr>
                <td>@(fam.Adults.Any() ? @fam.Adults.FirstOrDefault().LastName : "No adults registered")</td>
                <td>@fam.StreetName</td>
                <td>@fam.HouseNumber</td>
                <td>@fam.CalculateMembers(fam)</td>
                 <AuthorizeView Policy="MustBeAdministrator">
                <td><button class="oi oi-trash" @onclick="(async () => await RemoveFamilyAsync(fam))"></button></td>
                </AuthorizeView>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<Family> families;


    protected async override Task OnInitializedAsync()
    {
        families = await FamilyService.LoadFamilyAsync();
    }

    private async Task RemoveFamilyAsync(Family family)
    {
        families.Remove(families.FirstOrDefault(fam => fam.StreetName.Equals(family.StreetName) && fam.HouseNumber == family.HouseNumber));
        await FamilyService.RemoveFamilyAsync(family);
    }
}
