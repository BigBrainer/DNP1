@page "/addfamily"
@namespace ManageService
@using Models
@attribute [Authorize(Policy = "MustBeAdministrator")]
@inject IAddService IAddService
@inject NavigationManager NavigationManager


<EditForm Model="@Family" OnValidSubmit="Check">
    <div class="container-fluid d-flex flex-column align-items-center">
        <h4>Family home</h4>
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div style="color:red">@errorMessage</div>
        <div class="form-group">
            <label for="StreetName">Street name</label>
            <InputText disabled="@ShowAdultForm" class="form-control" @bind-Value="Family.StreetName" id="StreetName" />
        </div>
        <div class="form-group">
            <label for="HouseNumber">House number</label>
            <InputNumber disabled="@ShowAdultForm" class="form-control" @bind-Value="Family.HouseNumber" ParsingErrorMessage="Input a number" />
        </div>
        <button hidden="@ShowAdultForm" class="btn-primary">OK</button>

        @if (ShowAdultForm)
        {
            <AddAdult @bind-Adult="Adult1" @ref="child1" />
            <div>
                <button class="oi oi-plus btn-lg" style="color:darkgreen; border:none; background-color:white;" hidden="@ShowNextForm" @onclick="(() => ShowNextForm = true)"></button>
            </div>
            @if (ShowNextForm)
            {
                <AddAdult @bind-Adult="Adult2" @ref="child2" />
                <button class="oi oi-minus btn-lg" style="color:red; border:none; background-color:white;" hidden="@(!ShowNextForm)" @onclick="(() => ShowNextForm = false)"></button>
            }
        }
        <button hidden="@(!ShowAdultForm)" @onclick="Submit" class="btn-primary btn-lg" style="margin-top:5px; margin-bottom:5px">Submit</button>
    </div>
</EditForm>



@code {
    [Parameter]
    public Family Family { get; set; } = new Family();
    AddAdult child1;
    AddAdult child2;

    private bool ShowAdultForm { get; set; } = false;
    private bool ShowNextForm { get; set; } = false;
    public List<Adult> Adults { get; set; } = new List<Adult>();
    private Adult Adult1 { get; set; } = new Adult();
    private Adult Adult2 { get; set; } = new Adult();
    private String errorMessage;

    private void Check()
    {
        try
        {
            ((AddService)IAddService).AddressTakenCheck(Family);
            ShowAdultForm = true;
            errorMessage = "";
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    private void Submit()
    {
        if (!ShowNextForm)
        {
            if (child1.ValidateChild())
            {
                Adults.Add(Adult1);
                Save();
            }
        }
        else
        {
            if (child1.ValidateChild() && child2.ValidateChild())
            {
                Adults.Add(Adult1);
                Adults.Add(Adult2);
                Save();
            }
        }
    }

    private void Save()
    {
        ((AddService)IAddService).AddAdults(Family, Adults);
        NavigationManager.NavigateTo("/");
    }
}
