@page "/Todos"
@using Blazor_ToDo.Data
@using Blazor_ToDo.Models
@inject IToDoService ToDoService

<h3>To Do List</h3>

<label for="filterText">Filter by id</label>
<input type="number" class="form-control" id="filterText" @oninput="@((arg) => FilterByUserId(arg))" />

<label for="filterByStatus">Filter by status</label>
<select class="form-control selectpicker" @onchange="(arg) => FilterStatus(arg)">
    <option selected value="both">Both</option>
    <option value="done">Done</option>
    <option value="notDone">Not Done</option>
</select>

<button class="btn-primary" @onclick="AskForToDosAsync">Search</button>


@if (toDos == null)
{
    <p>
        <em>@message</em>
    </p>
}
else if (!toDos.Any())
{
    <p>
        <em>No To Dos which match your criteria. Try adding some!</em>
    </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>User ID</th>
                <th>To Do ID</th>
                <th>Title</th>
                <th>Completed</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in toDos)
            {
                <tr>
                    <td>@item.UserId</td>
                    <td>@item.TodoId</td>
                    <td>@item.Title</td>
                    <td>
                        <input type="checkbox" checked="@item.IsCompleted" @onchange="((arg) => CompletedChange(arg,item))" />
                    </td>
                    <td>
                        <button @onclick="@(() => RemoveToDo(item.TodoId))">
                            <i class="oi oi-trash" style="color:red" />
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IList<ToDo> toDos;
    private string message = "Please, select filters and press search...";

    private bool? filterByStatus;
    private int? filterById;

    private async Task AskForToDosAsync()
    {
        try
        {
            toDos = await ToDoService.GetToDosAsync(filterByStatus, filterById);
        }
        catch(Exception e)
        {
            message = e.Message;
        }
    }

    private async Task RemoveToDo(int toDoId)
    {
        ToDo toDoToRemove = toDos.First(t => t.TodoId == toDoId);
        await ToDoService.RemoveToDoAsync(toDoId);
        toDos.Remove(toDoToRemove);
    }

    private void CompletedChange(ChangeEventArgs args, ToDo item)
    {
        item.IsCompleted = (bool)args.Value;
        ToDoService.UpdateToDoAsync(item);
    }

    private void FilterByUserId(ChangeEventArgs args)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(args.Value.ToString());
        }
        catch (Exception e) { }
    }

    private void FilterStatus(ChangeEventArgs args)
    {
        filterByStatus = null;
        try
        {
            string status = args.Value.ToString();
            if (status.Equals("done"))
            {
                status = "true";
                filterByStatus = bool.Parse(status);
            }
            else if (status.Equals("notDone"))
            {
                status = "false";
                filterByStatus = bool.Parse(status);
            }
        }
        catch (Exception e)
        {

        }
    }
}
